{
  "_args": [
    [
      {
        "raw": "grunt-ng-constant@https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
        "scope": null,
        "escapedName": "grunt-ng-constant",
        "name": "grunt-ng-constant",
        "rawSpec": "https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
        "spec": "https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
        "type": "remote"
      },
      "/Users/kenaktom/src/dashboard-ui"
    ]
  ],
  "_from": "grunt-ng-constant@>=2.0.1 <3.0.0",
  "_id": "grunt-ng-constant@2.0.1",
  "_inCache": true,
  "_location": "/grunt-ng-constant",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-ng-constant@https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
    "scope": null,
    "escapedName": "grunt-ng-constant",
    "name": "grunt-ng-constant",
    "rawSpec": "https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
    "spec": "https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
  "_shasum": "0861c4398b2fc18754ff733e58c9a4f4cfdb57e9",
  "_shrinkwrap": null,
  "_spec": "grunt-ng-constant@https://registry.npmjs.org/grunt-ng-constant/-/grunt-ng-constant-2.0.1.tgz",
  "_where": "/Users/kenaktom/src/dashboard-ui",
  "author": {
    "name": "Malte Legenhausen",
    "email": "legenhausen@werk85.de"
  },
  "bugs": {
    "url": "https://github.com/werk85/grunt-ng-constant/issues"
  },
  "dependencies": {
    "jju": "^1.3.0",
    "lodash": "^4.5.1",
    "merge": "^1.2.0",
    "tosource": "^1.0.0"
  },
  "description": "Plugin for dynamic generation of angular constant modules.",
  "devDependencies": {
    "grunt": "1.0.0-rc1",
    "grunt-bump": "^0.7.0",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^0.4.1"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "https://github.com/werk85/grunt-ng-constant",
  "keywords": [
    "grunt",
    "gruntplugin",
    "angular",
    "angularjs",
    "constants",
    "constant",
    "values",
    "value",
    "module",
    "generator"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/werk85/grunt-ng-constant/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "name": "grunt-ng-constant",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# grunt-ng-constant [![Build Status](https://travis-ci.org/werk85/grunt-ng-constant.png?branch=master)](https://travis-ci.org/werk85/grunt-ng-constant)\n\n> Plugin for dynamic generation of angular constant and value modules.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-ng-constant --save-dev\n```\n\nWhen the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-ng-constant');\n```\n\n## The \"ngconstant\" task\n\n### Overview\nThe following shows a simple configuration for generating a config module with one constant and one value that contain your package information and debug config.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      name: 'config',\n      dest: 'config.js',\n      constants: {\n        package: grunt.file.readJSON('package.json')\n      },\n      values: {\n        debug: true\n      }\n    },\n    build: {\n    }\n  },\n})\n```\n\nFor the target `build` the resulting file `config.js` looks like this:\n\n```js\nangular.module('config', [])\n\n.constant('package', {\n  \"version\": \"0.0.1\",\n  ...\n})\n\n.value(\"debug\", true)\n\n;\n```\n\n### Options\n\n#### name\nType: `String`\n\nRequired\n\nThe name of the constant module used in your angular project.\n\n#### dest\nType: `String`\n\nRequired\n\nThe path where the generated constant module should be saved.\n\n#### deps\nType: `Array` or `Boolean`\n\nDefault value: `[]`\n\nOptional\n\nAn array that specifies the default dependencies a module should have. When your module should not have any modules, so you can append the constants to an already existing one, you can set `deps` to `false`.\n\n#### constants\nType: `Object`, `String`, `Function`\n\nDefault value: `{}`\n\nOptional\n\nIf it is an object it gets automatically merged in all target `constants` definitions. This option should be used when you need a global `constants` definition for all your targets.\n\n#### values\nType: `Object`, `String`, `Function`\n\nDefault value: `{}`\n\nOptional\n\nIf it is an object it gets automatically merged in all target `values` definitions. This option should be used when you need a global `values` definition for all your targets.\n\n#### wrap\nType: `String` or `Boolean`\n\nDefault value: `false`\n\nOptional\n\nA boolean to activate or deactivate the automatic wrapping. A string which will wrap the result of file, use the `{%= __ngModule %}` variable to indicate where to put the generated module content. See the \"Custom Wrap Option\" section for further informations.\n\n#### serializer\nType: `String|Function`\n\nDefault value: `jju`\n\nOptional\n\nAvailable options:\n\n * `jju` (Default) Uses the [jju](https://github.com/rlidwka/jju) stringify method.\n * `json` Uses `JSON.stringify` for serialization.\n * `tosource` Use the [node-tosource](https://github.com/marcello3d/node-tosource) module.\n\nIf you want to define your own serializer use `function(obj, serializerOptions, options) {Â return /* your serialized string */ }`. `this` will be set to the plugin context.\n\n#### serializerOptions\nType: `Object`\n\nDefault value: `{indent: '', no_trailing_comma: true}`\n\nOptional\n\nUse this option for setting specific options for the given serializer. The default config configures the [jju](https://github.com/rlidwka/jju) stringify method. See the documentation for more information of possible options.\n\n#### template\nType: `String`\n\nDefault value: `grunt.file.read('constant.tpl.ejs')`\n\nOptional\n\nCustom template for creating the output constants file. Defaults to the default constants template file if none provided.\n\n#### delimiters\nType: `String`\n\nDefault value: `'ngconstant'` which sets the template delimiters to `{%` and `%}`. Make sure that you do not use the same delimiters as your grunt configuration or you get an unwanted behavior.\n\nOptional\n\n#### configMergeCustomizer\nType: `Function`\n\nDefault value: `_.noop`\n\nOptional\n\nAllows to customize the merge of global and target configuration. The function has the signature `(key, objValue, srcValue, key, object, source, stack)`. The `key` parameter can be `'constants'` or `'values'`. The rest of the parameters is identical to [_.mergeWith](https://lodash.com/docs#mergeWith).\n\n### Usage Examples\n\n#### Default Options\nIn this example I convert the package.json information to an angular module. So I am able to display such things as the current version of the application in the app.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    dist: {\n      options: {\n        dest: 'dist/constants.js',\n        name: 'constants',\n      },\n      constants: {\n        package: grunt.file.readJSON('package.json')\n      },\n      values: {\n        debug: true\n      }\n    }\n  },\n})\n```\n\n__Note__: In most cases for all following examples the applied functionality on `constants` can also be achieved with the `values` parameter.\n\n#### Custom Options\nIn this example we set custom configurations for the `space` and `deps` parameters. So we create a module that has `dep1` and `dep2` as dependencies and defines two different constants `constants1` and `constants2` with custom values. The `space` parameter is set to a ` `.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      space: ' ',\n      deps: ['dep1', 'dep2'],\n      dest: 'dist/module.js',\n      name: 'someModule'\n    },\n    dist: {\n      constants: {\n        'constant1': {\n          'key1': 'value1',\n          'key2': 42\n        },\n        'constant2': 'value2'\n      }\n    }\n  },\n})\n```\n\nThe resulting module looks like the following:\n\n```js\nangular.module(\"someModule\", [\"dep1\", \"dep2\"])\n\n.constant(\"constant1\", {\n  \"key1\": \"value1\",\n  \"key2\": 42\n})\n\n.constant(\"constant2\", \"value2\")\n\n;\n```\n\nYou can also load the constants definition directly from a file:\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      dest: 'dist/module.js',\n      name: 'someModule'\n    },\n    dist: {\n      constants: 'constants.json'\n    }\n  },\n})\n```\n\nOr if you want to calculate the constants value at runtime you can create a lazy evaluated method which should be used if you generate your json file during the build process.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      dest: 'dist/module.js',\n      name: 'someModule'\n    },\n    dist: {\n      constants: function () {\n        return {\n          lazyConfig: grunt.file.readJSON('build/lazy-config.json')\n        };\n      }\n    }\n  },\n})\n```\n\n#### Wrap Option\n\nThe `wrap` option allows you to encapsulate the module in a closure. Simply set `wrap` to `true`.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      dest: 'tmp/wrap_options.js',\n      name: 'module2',\n      wrap: true\n    },\n    dist: {\n      constants: {\n        'constant1': {\n          key1: 123,\n          key2: 'value2',\n          foobar: false\n        }\n      }\n      \n    },\n    nowrap: { \n      options: {\n        wrap: false // Disable wrapping for the 'nowrap' target\n      },\n      constants: {\n        ...\n      }\n    }\n  },\n})\n```\n\nThe resulting module looks like:\n\n```js\n(function(angular, undefined) {\n   angular.module(\"module2\", [\"test\"])\n\n.constant(\"constant1\", {\n  \"key1\": 123,\n  \"key2\": \"value2\",\n  \"foobar\": false\n})\n\n; \n})(angular);\n```\n\n#### Custom Wrap Option\n\nIf you want to use another wrapping you can use a string as `wrap` option, which is interpolated by the plugin. Use the `__ngModule` variable as placeholder for the generated module.\n\nHere a RequireJS example:\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      dest: 'tmp/wrap_options.js',\n      name: 'module2',\n      wrap: 'define([\"angular\", \"ngResource\", \"ngCookies\"], function() { \\n return {%= __ngModule %} \\n\\n});',\n    },\n    dist: {\n      constants: {\n        'constant1': {\n          key1: 123,\n          key2: 'value2',\n          foobar: false\n        }\n      }\n    }\n  },\n})\n```\n\nThe resulting module looks like the following:\n\n```js\ndefine([\"angular\", \"ngResource\", \"ngCookies\"], function() { \n return angular.module(\"module2\", [\"test\"])\n\n.constant(\"constant1\", {\n  \"key1\": 123,\n  \"key2\": \"value2\",\n  \"foobar\": false\n})\n\n; \n\n});\n```\n\n__Note__: For longer wrapping templates it is recommended to use `grunt.file.read('customer-wrap.tpl.ejs')`.\n\n#### Global Constants option\n\nIf you need the same configuration for all your targets you can use the `constants` option to automatically merge your per target configuration into the global one. If you don't want to merge, you can use the per target `constants` option to override everything.\n\n```js\ngrunt.initConfig({\n  ngconstant: {\n    options: {\n      name: 'config',\n      dest: 'config.js',\n      constants: {\n        title: 'grunt-ng-constant',\n        debug: true\n      }\n    },\n    dev: {\n      constants: {\n        title: 'grunt-ng-constant-beta'\n      }\n    },\n    prod: {\n      constants: {\n        debug: false\n      }\n    },\n    override_global: {\n      options: {\n        constants: { // This does not merge it overrides\n          ...\n        }\n      }\n    }\n  }\n});\n```\n\nWhich results in the following constants objects.\n\nFor the target `dev`:\n\n```js\nangular.module('config', [])\n\n.constant('title', 'grunt-ng-constant-beta')\n\n.constant('debug', true)\n\n;\n```\n\nFor the target `prod`:\n\n```js\nangular.module('config', [])\n\n.constant('title', 'grunt-ng-constant')\n\n.constant('debug', false)\n\n;\n```\n\n## FAQ\n\n#### How can I change the style of the generated code?\nIf the code looks to ugly for you. You can use [grunt-jsbeautifyer](https://github.com/vkadam/grunt-jsbeautifier).\n\n#### How can I create multiple modules?\nCreate a custom target for each module and set the `dest`, `name`, `constants` and `values` parameter for each one.\n\n#### How can I create a CoffeeScript version of the module\nTill v1.0.0 this was supported natively by the plugin. Now you have to use the [grunt-js2coffee](https://github.com/jonschlinkert/grunt-js2coffee) plugin.\n\n#### Hey I like this project how can I help?\nReport bugs, propose new features or simply star the project that shows me that are people are interested in this project.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/werk85/grunt-ng-constant.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "2.0.1"
}
